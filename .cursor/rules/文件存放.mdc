---
description: 
globs: 
alwaysApply: true
---
##项目文件说明与存放
- 生成新文件时都根据功能放到相应的文件夹中，不要乱放

Interview-GPT 项目文件夹详细说明
前端文件夹 (frontend/)
public/
用途：用于存储由Web服务器直接提供的静态资源（如字体、图片、图标、SVG等）。 
位置说明：Next.js中静态文件的标准位置，这些文件可以通过根URL路径直接访问。

src/components/
用途：存放React组件，包含所有UI交互元素的代码。 
位置说明：应用程序的核心构建块，按功能和用途进一步细分为子文件夹。

src/components/common/
用途：存放可在整个应用中重用的通用UI组件（如按钮、输入框、模态框等）。 
位置说明：每个组件应有自己的文件夹，包含组件文件、样式文件和测试文件。

src/components/interview/
用途：存放与面试流程相关的特定组件（如面试官显示、问答界面、录音控件等）。 
位置说明：面试功能的专用组件，处理面试过程中的UI交互。

src/components/dashboard/
用途：存放用户仪表板相关组件（如统计卡片、历史记录、进度图表等）。 
位置说明：用户登录后查看个人数据和面试历史的界面组件。

src/contexts/
用途：存放React上下文（Context）定义，用于跨组件共享状态。 
位置说明：提供应用级别的状态管理，如用户认证状态、主题设置等。

src/hooks/
用途：存放自定义React钩子（Hooks），封装可重用的状态逻辑。 
位置说明：提取组件逻辑到独立函数，促进代码复用和关注点分离。

src/pages/
用途：存放Next.js页面组件，每个文件对应一个路由。 
位置说明：基于文件系统的路由结构，如index.tsx对应首页，[id].tsx对应动态路由。

src/services/
用途：存放与API交互的服务函数，处理数据获取和提交。 
位置说明：封装所有外部API调用，提供清晰的数据访问接口。

src/store/
用途：存放状态管理相关文件，如Redux store配置、切片、操作等。 
位置说明：集中管理应用的复杂状态，特别是需要在多个组件间共享的状态。

src/styles/
用途：存放全局样式文件、主题配置、CSS变量等。 
位置说明：定义应用的视觉风格基础，与组件特定样式分开管理。

src/types/
用途：存放TypeScript类型定义和接口。 
位置说明：集中管理类型定义，确保类型一致性和代码安全性。

src/utils/
用途：存放通用工具函数，如日期格式化、字符串处理、验证函数等。 
位置说明：提供各种辅助功能，不直接与UI或状态管理相关。

后端文件夹 (backend/)
src/agents/
用途：存放AI面试官代理的实现代码，包括不同角色的面试官逻辑。 
位置说明：项目的核心功能，实现AI面试官的行为和决策逻辑。

src/api/
用途：存放API路由定义和处理函数。 
位置说明：定义后端API端点，将请求路由到相应的控制器。

src/config/
用途：存放应用配置文件，如环境变量、数据库连接配置等。 
位置说明：集中管理所有配置参数，方便环境切换和部署。

src/controllers/
用途：存放请求处理控制器，接收请求并返回响应。 
位置说明：API路由的实现层，协调数据访问和业务逻辑。

src/db/
用途：存放数据库连接和操作相关代码。 
位置说明：管理数据库连接、迁移、种子数据等。

src/middlewares/
用途：存放中间件函数，用于请求预处理和后处理。 
位置说明：实现横切关注点，如认证、日志记录、错误处理等。

src/models/
用途：存放数据模型定义，描述数据库结构和关系。 
位置说明：定义应用的数据实体，MongoDB的Schema定义。

src/services/
用途：存放业务逻辑服务，实现核心功能。 
位置说明：封装复杂业务逻辑，被控制器调用，可能调用多个模型。

src/types/
用途：存放后端TypeScript类型定义。 
位置说明：确保后端代码的类型安全，定义请求、响应和内部数据结构。

src/utils/
用途：存放后端通用工具函数。 
位置说明：提供辅助功能，如加密、令牌生成、日期处理等。

共享文件夹 (shared/)
types/
用途：存放前后端共享的TypeScript类型定义。 
位置说明：确保前后端数据结构一致，防止类型不匹配错误。

constants/
用途：存放前后端共享的常量定义。 
位置说明：集中管理API路径、错误代码、枚举值等共享常量。

项目根目录文件
docs/
用途：存放项目文档，包括API文档、架构文档、部署指南等。 
位置说明：集中管理所有项目文档，方便团队成员查阅。

.gitignore
用途：指定Git版本控制应忽略的文件和目录。 
位置说明：项目根目录的标准位置，防止敏感信息和生成文件被提交。

README.md
用途：提供项目概述、安装说明、使用方法等基本信息。 
位置说明：项目的入口文档，通常是新人接触项目的第一个文件。

package.json
用途：定义工作区配置，管理项目依赖和脚本。 
位置说明：使用monorepo结构时的根配置文件，协调前后端子项目。


