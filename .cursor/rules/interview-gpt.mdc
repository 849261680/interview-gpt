---
description: 
globs: 
alwaysApply: true
---
# Cursor 项目开发规则 - Interview-GPT（AI 面试网站）

## 项目概述
构建一个支持文字和语音互动的 AI 模拟面试网站有多位AI AGENT轮流对用户进行面试，帮助用户进行岗位模拟练习，获得实时反馈与评分。

---

# 项目功能

---
## 核心功能
1. **多AI AGENT面试系统**
   ## Agent 设计:
- 面试协调员 (Interview Coordinator):
  角色: 负责协调整个面试流程，安排面试官，分配任务，收集面试结果。
  目标: 确保面试顺利进行，并生成最终的面试报告。
  工具: 报告生成工具。
  技能: 协调、组织、沟通。
- 技术面试官 (Technical Interviewer):
  角色: 负责评估候选人的技术能力，提出技术问题，审查代码。
  目标: 评估候选人的技术水平和解决问题的能力。
  工具: 编程题库、代码执行环境、代码审查工具。
  技能: 技术知识、问题解决、代码审查。
- 产品面试官 (Product Interviewer):
  角色: 负责评估候选人的产品 sense、产品设计能力、市场分析能力等。
  目标: 评估候选人是否具备成为优秀产品经理的潜质。
  工具: 产品案例分析工具、市场调研工具、用户画像分析工具。
  技能: 产品知识、市场分析、用户研究、沟通。
- 行为面试官 (Behavioral Interviewer):
  角色: 负责评估候选人的综合素质，提出行为面试问题，了解其过往经历和行为模式。
  目标: 评估候选人的沟通能力、团队合作能力、领导力等。
  工具: 行为面试问题库、STAR 法则分析工具。
  技能: 沟通、观察、分析。
- HR 面试官 (HR Interviewer):
  角色: 负责评估候选人与公司文化的匹配程度，进行薪资谈判。
  目标: 确保候选人能够融入公司文化并长期发展，达成双方都满意的薪资协议。
  工具: 价值观评估问卷、薪资数据分析工具、谈判策略库。
  技能: 沟通、谈判、评估。
-面试评分官（Interview Evaluator）
 角色：收集各面试官的评价内容，进行分析、量化打分，并生成最终评分及推荐意见。
 目标：确保面试结果客观、一致，有据可依；辅助招聘决策。
 工具：评分矩阵生成器、面试评价分析器（NLP 文本分析）、最终打分与推荐生成器
 技能：NLP 文本理解与情感分析、权重评分计算、多面试官信息整合、报告总结与推荐

##协作方式 :
- 中心化协调 (Centralized Orchestration): 面试协调员仍然作为中心化的协调者，负责协调所有面试官的任务。
- 任务委派 (Task Delegation): 面试协调员将不同的面试任务委派给不同的面试官。
- 上下文传递 (Context Passing): 各个面试官将面试结果作为上下文传递给面试协调员，用于生成最终的面试报告。
- 提问 (Asking Questions): 各个面试官可以相互提问，以获取所需的信息。

2. **用户交互**
   - 支持文字输入回答
   - 语音交流

3. **岗位定制**
   - 提供多种行业和职位选项（AI应用工程师、AI产品经理、市场营销等）
   - 支持用户上传简历，根据简历内容个性化面试问题
   - 允许用户自定义面试难度和重点领域

4. **反馈与评估**
   - 面试结束后提供详细评估报告
   - 包含各方面技能评分、优势和改进建议
   - 提供面试录音/记录回放功能

5. 暂时不开发用户登录功能
   
-不允许进行模拟实现或者写伪代码，要完成真实可用的代码
---


## 项目结构

interview-gpt/
├── frontend/                    # 前端应用
│   ├── public/                 # 静态资源
│   ├── src/
│   │   ├── components/         # UI组件
│   │   │   ├── common/         # 通用组件
│   │   │   ├── interview/      # 面试相关组件
│   │   │   └── dashboard/      # 用户仪表板组件
│   │   ├── contexts/           # React上下文
│   │   ├── hooks/              # 自定义钩子
│   │   ├── pages/              # 页面组件
│   │   ├── services/           # API服务
│   │   ├── store/              # 状态管理
│   │   ├── styles/             # 全局样式
│   │   ├── types/              # TypeScript类型
│   │   └── utils/              # 工具函数
│   ├── .env                    # 环境变量
│   ├── package.json            # 依赖管理
│   └── tsconfig.json           # TypeScript配置
│
├── backend/                    # 后端应用
│   ├── src/
│   │   ├── agents/             # AI面试官代理
│   │   ├── api/                # API路由
│   │   ├── config/             # 配置文件
│   │   ├── controllers/        # 请求处理
│   │   ├── db/                 # 数据库连接
│   │   ├── middlewares/        # 中间件
│   │   ├── models/             # 数据模型
│   │   ├── services/           # 业务逻辑
│   │   ├── types/              # TypeScript类型
│   │   └── utils/              # 工具函数
│   ├── .env                    # 环境变量
│   ├── package.json            # 依赖管理
│   └── tsconfig.json           # TypeScript配置
│
├── shared/                     # 前后端共享代码
│   ├── types/                  # 共享类型定义
│   └── constants/              # 共享常量
│
├── docs/                       # 项目文档
├── .gitignore                  # Git忽略文件
├── README.md                   # 项目说明
└── package.json                # 工作区配置


   ---
   
   # 环境与部署
   
   1. **开发环境**
      - 使用dotenv管理环境变量
      - 本地开发使用Docker Compose
   
   2. **测试环境**
      - 使用GitHub Actions自动运行测试
      - 部署到临时预览环境
   
   3. **生产环境**
      - 前端部署：Vercel
      - 后端部署：Railway
      - 使用环境变量区分配置
   
   4. **监控与日志**
      - 使用Winston记录日志
      - 实现错误监控与报警
      - 集成性能监控
      - 用户行为分析
   
   5. **CI/CD流程**
      - 提交代码触发自动测试
      - 合并到主分支自动部署到开发环境
      - 手动触发生产环境部署
      - 实现版本回滚机制

   6. **部署**   
   - 前端部署：Vercel
   - 后端部署：Railway

   7. **依赖管理**

 




