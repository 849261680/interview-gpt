---
description: 
globs: 
alwaysApply: true
---
# Cursor 项目开发规则 - Interview-GPT（AI 面试网站）

## 项目概述
构建一个支持文字和语音互动的 AI 模拟面试网站有多位AI AGENT轮流对用户进行面试，帮助用户进行岗位模拟练习，获得实时反馈与评分。

---

# 项目功能

---
## 核心功能
1. **多AI AGENT面试系统**
   - 创建多个不同角色的AI面试官
   - 技术面试官（主要提问方向：项目技术细节、框架选型、编码能力、性能优化等）
   - HR面试官（主要提问方向：职业规划、稳定性、团队适配、薪资期望等）
   - 产品经理（主要提问方向：场景理解、用户视角、跨职能沟通能力、业务价值）
   - 总面试官（主要提问方向：汇总前面内容，做出是否推荐、输出面试评估报告）
   - 面试官轮流提问，模拟真实面试场景
   - 每个面试官有特定的性格、提问风格和评分标准

2. **用户交互**
   - 支持文字输入回答
   - 实时语音交流

3. **岗位定制**
   - 提供多种行业和职位选项（AI应用工程师、AI产品经理、市场营销等）
   - 支持用户上传简历，根据简历内容个性化面试问题
   - 允许用户自定义面试难度和重点领域

4. **反馈与评估**
   - 面试结束后提供详细评估报告
   - 包含各方面技能评分、优势和改进建议
   - 提供面试录音/记录回放功能

5. 暂时不开发用户登录功能
   
-不允许进行模拟实现或者写伪代码，要完成真实可用的代码
---


## 项目结构

interview-gpt/
├── frontend/                    # 前端应用
│   ├── public/                 # 静态资源
│   ├── src/
│   │   ├── components/         # UI组件
│   │   │   ├── common/         # 通用组件
│   │   │   ├── interview/      # 面试相关组件
│   │   │   └── dashboard/      # 用户仪表板组件
│   │   ├── contexts/           # React上下文
│   │   ├── hooks/              # 自定义钩子
│   │   ├── pages/              # 页面组件
│   │   ├── services/           # API服务
│   │   ├── store/              # 状态管理
│   │   ├── styles/             # 全局样式
│   │   ├── types/              # TypeScript类型
│   │   └── utils/              # 工具函数
│   ├── .env                    # 环境变量
│   ├── package.json            # 依赖管理
│   └── tsconfig.json           # TypeScript配置
│
├── backend/                    # 后端应用
│   ├── src/
│   │   ├── agents/             # AI面试官代理
│   │   ├── api/                # API路由
│   │   ├── config/             # 配置文件
│   │   ├── controllers/        # 请求处理
│   │   ├── db/                 # 数据库连接
│   │   ├── middlewares/        # 中间件
│   │   ├── models/             # 数据模型
│   │   ├── services/           # 业务逻辑
│   │   ├── types/              # TypeScript类型
│   │   └── utils/              # 工具函数
│   ├── .env                    # 环境变量
│   ├── package.json            # 依赖管理
│   └── tsconfig.json           # TypeScript配置
│
├── shared/                     # 前后端共享代码
│   ├── types/                  # 共享类型定义
│   └── constants/              # 共享常量
│
├── docs/                       # 项目文档
├── .gitignore                  # Git忽略文件
├── README.md                   # 项目说明
└── package.json                # 工作区配置


   ---
   
   # 环境与部署
   
   1. **开发环境**
      - 使用dotenv管理环境变量
      - 本地开发使用Docker Compose
   
   2. **测试环境**
      - 使用GitHub Actions自动运行测试
      - 部署到临时预览环境
   
   3. **生产环境**
      - 前端部署：Vercel
      - 后端部署：Railway
      - 使用环境变量区分配置
   
   4. **监控与日志**
      - 使用Winston记录日志
      - 实现错误监控与报警
      - 集成性能监控
      - 用户行为分析
   
   5. **CI/CD流程**
      - 提交代码触发自动测试
      - 合并到主分支自动部署到开发环境
      - 手动触发生产环境部署
      - 实现版本回滚机制

   6. **部署**   
   - 前端部署：Vercel
   - 后端部署：Railway

   7. **依赖管理**

 




