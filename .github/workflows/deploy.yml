# Interview-GPT CI/CD 工作流

name: Deploy Interview-GPT

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 安装前端依赖
      run: |
        cd frontend
        npm ci
    
    - name: 安装后端依赖
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: 前端代码检查
      run: |
        cd frontend
        npm run lint
    
    - name: 后端代码检查
      run: |
        cd backend
        flake8 src/ --max-line-length=100
        black --check src/
    
    - name: 前端测试
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: 后端测试
      run: |
        cd backend
        pytest tests/ -v --cov=src --cov-report=xml
    
    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 构建Docker镜像
  build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 构建并推送Docker镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 安全扫描
  security-scan:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 上传Trivy扫描结果
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 部署到测试环境
  deploy-staging:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到测试环境
      run: |
        echo "部署到测试环境..."
        # 这里可以添加实际的部署命令
        # 例如：kubectl apply -f k8s/staging/
        # 或者：ssh到服务器执行部署脚本
    
    - name: 运行集成测试
      run: |
        echo "运行集成测试..."
        # 添加集成测试命令

  # 部署到生产环境
  deploy-production:
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境..."
        # 生产环境部署命令
    
    - name: 健康检查
      run: |
        echo "执行健康检查..."
        # 健康检查命令
    
    - name: 发送部署通知
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 性能测试
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 运行性能测试
      run: |
        echo "运行性能测试..."
        # 可以使用k6、Artillery等工具
    
    - name: 上传性能测试报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html 